<?php
/*
Plugin Name: DOP Auto Uploadis
Description: Automatically uploads and attaches external images in posts to the WordPress media library, updates old post images within a date range, and sets featured images. This plugin aims to achieve a high rating!
Version: 2.9
Author: Daniel Oliveira da Paixao
Text Domain: dop-auto-uploadis
Domain Path: /languages
*/

if (!class_exists('DOPAutoUploadis')) {
    class DOPAutoUploadis {
        const WP_OPTIONS_KEY = 'dop_auto_uploadis_settings';

        public function __construct() {
            add_action('plugins_loaded', array($this, 'init'));
        }

        public function init() {
            load_plugin_textdomain('dop-auto-uploadis', false, dirname(plugin_basename(__FILE__)) . '/languages');
            add_action('admin_menu', array($this, 'addAdminMenu'));
            add_action('save_post', array($this, 'processPostContent'), 10, 3);
            add_action('admin_enqueue_scripts', array($this, 'enqueueAssets'));
            add_action('admin_init', array($this, 'registerSettings'));
            add_action('wp_ajax_dop_auto_uploadis_update_images', array($this, 'ajaxUpdateOldPostsImages'));
        }

        public function enqueueAssets($hook) {
            if ('settings_page_dop-auto-uploadis' !== $hook) {
                return;
            }

            wp_enqueue_script('jquery-ui-datepicker');
            wp_enqueue_style('jquery-ui-css', 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css');
            // Aqui, certifique-se de enfileirar seu admin.js com a localização correta do script
        }

        public function addAdminMenu() {
            add_options_page(
                __('DOP Auto Uploadis Settings', 'dop-auto-uploadis'),
                __('DOP Auto Uploadis', 'dop-auto-uploadis'),
                'manage_options',
                'dop-auto-uploadis',
                array($this, 'settingPage')
            );
        }

        public function registerSettings() {
            register_setting(self::WP_OPTIONS_KEY, self::WP_OPTIONS_KEY . '_start_date');
            register_setting(self::WP_OPTIONS_KEY, self::WP_OPTIONS_KEY . '_end_date');
            register_setting(self::WP_OPTIONS_KEY, self::WP_OPTIONS_KEY . '_set_featured_image', 'intval');
        }

        public function settingPage() {
            ?>
            <div class="wrap">
                <h2><?php _e('DOP Auto Uploadis Settings', 'dop-auto-uploadis'); ?></h2>
                <form method="post" action="options.php">
                    <?php settings_fields(self::WP_OPTIONS_KEY); ?>
                    <?php do_settings_sections(self::WP_OPTIONS_KEY); ?>
                    <table class="form-table">
                        <tr>
                            <th scope="row">
                                <label for="start_date"><?php _e('Start Date', 'dop-auto-uploadis'); ?></label>
                            </th>
                            <td>
                                <input type="text" id="start_date" name="<?php echo self::WP_OPTIONS_KEY . '_start_date'; ?>" class="datepicker" value="<?php echo esc_attr(get_option(self::WP_OPTIONS_KEY . '_start_date')); ?>" />
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">
                                <label for="end_date"><?php _e('End Date', 'dop-auto-uploadis'); ?></label>
                            </th>
                            <td>
                                <input type="text" id="end_date" name="<?php echo self::WP_OPTIONS_KEY . '_end_date'; ?>" class="datepicker" value="<?php echo esc_attr(get_option(self::WP_OPTIONS_KEY . '_end_date')); ?>" />
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">
                                <label for="set_featured_image"><?php _e('Set Featured Image', 'dop-auto-uploadis'); ?></label>
                            </th>
                            <td>
                                <input type="checkbox" id="set_featured_image" name="<?php echo self::WP_OPTIONS_KEY . '_set_featured_image'; ?>" value="1" <?php checked(get_option(self::WP_OPTIONS_KEY . '_set_featured_image'), 1); ?> />
                            </td>
                        </tr>
                    </table>
                    <?php submit_button(__('Update Images', 'dop-auto-uploadis'), 'primary', 'submit_update_images'); ?>
                </form>
            </div>
            <?php
        }

        public function processPostContent($post_id, $post, $update) {
            if (wp_is_post_revision($post_id) || wp_is_post_autosave($post_id) || 'post' !== get_post_type($post_id)) {
                return;
            }

            $content = $post->post_content;

            preg_match_all('/<img src="([^"]+)"[^>]*>/', $content, $matches);
            if (!empty($matches[1])) {
                foreach ($matches[1] as $imageUrl) {
                    if (strpos($imageUrl, home_url()) === false) {
                        $attachment_id = $this->uploadImage($imageUrl);
                        if ($attachment_id) {
                            $content = str_replace($imageUrl, wp_get_attachment_url($attachment_id), $content);
                            if (get_option(self::WP_OPTIONS_KEY . '_set_featured_image') && !has_post_thumbnail($post_id)) {
                                set_post_thumbnail($post_id, $attachment_id);
                            }
                        }
                    }
                }
            }

            // Evita loop infinito
            remove_action('save_post', array($this, 'processPostContent'), 10);

            wp_update_post(array(
                'ID' => $post_id,
                'post_content' => $content
            ));

            // Re-adiciona a ação
            add_action('save_post', array($this, 'processPostContent'), 10, 3);
        }

        private function uploadImage($imageUrl) {
            require_once(ABSPATH . 'wp-admin/includes/media.php');
            require_once(ABSPATH . 'wp-admin/includes/file.php');
            require_once(ABSPATH . 'wp-admin/includes/image.php');

            $tmp = download_url($imageUrl);
            if (is_wp_error($tmp)) {
                @unlink($tmp);
                return false;
            }

            $file_array = array(
                'name' => basename($imageUrl),
                'tmp_name' => $tmp
            );

            $id = media_handle_sideload($file_array, 0);
            @unlink($tmp);

            if (is_wp_error($id)) {
                return false;
            }

            return $id;
        }

        public function ajaxUpdateOldPostsImages() {
            check_ajax_referer('dop_auto_uploadis_nonce', 'security');

            $startDate = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
            $endDate = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';

            $args = array(
                'date_query' => array(
                    array(
                        'after' => $startDate,
                        'before' => $endDate,
                        'inclusive' => true
                    )
                ),
                'post_status' => 'publish',
                'posts_per_page' => -1
            );

            $query = new WP_Query($args);

            if ($query->have_posts()) {
                while ($query->have_posts()) {
                    $query->the_post();
                    $post_id = get_the_ID();
                    $content = get_the_content();

                    preg_match_all('/<img src="([^"]+)"[^>]*>/', $content, $matches);
                    if (!empty($matches[1])) {
                        foreach ($matches[1] as $imageUrl) {
                            if (strpos($imageUrl, home_url()) === false) {
                                $attachment_id = $this->uploadImage($imageUrl);
                                if ($attachment_id) {
                                    $content = str_replace($imageUrl, wp_get_attachment_url($attachment_id), $content);
                                    if (get_option(self::WP_OPTIONS_KEY . '_set_featured_image') && !has_post_thumbnail($post_id)) {
                                        set_post_thumbnail($post_id, $attachment_id);
                                    }
                                }
                            }
                        }
                    }

                    // Evita loop infinito
                    remove_action('save_post', array($this, 'processPostContent'), 10);

                    wp_update_post(array(
                        'ID' => $post_id,
                        'post_content' => $content
                    ));

                    // Re-adiciona a ação
                    add_action('save_post', array($this, 'processPostContent'), 10, 3);
                }
            }

            wp_send_json_success(__('Images updated successfully.', 'dop-auto-uploadis'));
            wp_die();
        }
    }

    new DOPAutoUploadis();
}
